spring.cloud.stream.function.bindings.process-in-0=input
spring.cloud.stream.function.bindings.process-out-0=output
spring.cloud.stream.bindings.output.content-type=application/*+avro

# based on https://www.baeldung.com/spring-cloud-stream-kafka-avro-confluent#kafka-serialization-libraries
spring.cloud.stream.kafka.binder.producer-properties.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.binder.producer-properties.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.binder.producer-properties.schema.registry.url=http://schema-registry:8081

#####################
# Consumer props
#####################
# send to error handling first, then if no error, sends to "delegate" (ie the real deserializer) set in properties 
# https://www.confluent.io/blog/spring-kafka-can-your-kafka-consumers-handle-a-poison-pill/#survive-a-poison-pill
spring.cloud.stream.kafka.binder.consumer-properties.key.deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.cloud.stream.kafka.binder.consumer-properties.value.deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer

# Delegate deserializers
# basing prop on https://stackoverflow.com/q/67638412/6952495 question
spring.cloud.stream.kafka.binder.consumer-properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.binder.consumer-properties.spring.deserializer.value.delegate.class=io.confluent.kafka.serializers.KafkaAvroDeserializer

# other consumer props
spring.cloud.stream.kafka.binder.consumer-properties.schema.registry.url=http://schema-registry:8081
spring.cloud.stream.kafka.binder.consumer-properties.specific.avro.reader=true

